name: 'Deploy_Pt2'

on:
  workflow_dispatch:
    inputs:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_REGION:
        required: true
        default: 'us-east-1'
      AWS_ECR_URL:
        required: true

env: # AWS CLI baked in
  AWS_ACCESS_KEY_ID: ${{ github.event.inputs.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ github.event.inputs.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ github.event.inputs.AWS_REGION }}
  AWS_ECR_URL: ${{ github.event.inputs.AWS_ECR_URL }}

jobs:
  deploy_time:
    name: 'Deploy Pt. 2'
    runs-on: ubuntu-latest
    environment: default
    defaults:
      run:
        shell: bash

    steps:
    # Checkout repository to runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: set app yaml
      id: set_app_yaml
      working-directory: kubernetes
      run: |
        sed -i -e "s\\REPLACE_ME\\${AWS_ECR_URL}\\g" webapp.yaml

    - name: install kubectl
      id: install_kubectl
      working-directory: kubernetes
      run: |
        sudo apt-get update && sudo apt-get install -y ca-certificates curl apt-transport-https
        curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg
        echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
        sudo apt-get update && sudo apt-get install -y kubectl

    - name: kube_config
      id: kube_config
      working-directory: kubernetes
      run: |
        aws eks update-kubeconfig --region $AWS_REGION --name xyz_cluster
        kubectl version

    # Login ECR
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ github.event.inputs.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ github.event.inputs.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ github.event.inputs.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: xyz_ecr_repo
        IMAGE_TAG: latest
      working-directory: docker
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    # Kube Apply
    - name: Kube Apply
      id: kube_apply
      working-directory: kubernetes
      run: |
        kubectl apply -f service.yaml
        kubectl apply -f webapp.yaml

    - name: Wait for service
      id: wait_for_service
      working-directory: kubernetes
      run: |
        while [ -z $ENDPOINT ]; do
          ENDPOINT=$(kubectl get service xyz-flask-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        done
        echo "The flask app is accessible here: http://${ENDPOINT}:8080"
